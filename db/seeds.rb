# This file should contain all the record creation needed to seed the database with its default values.
# The data can then be loaded with the rails db:seed command (or created alongside the database with db:setup).
#
# Examples:
#
#   movies = Movie.create([{ name: 'Star Wars' }, { name: 'Lord of the Rings' }])
#   Character.create(name: 'Luke', movie: movies.first)

Search.destroy_all
Article.destroy_all

articles = [
	{ 
		title: '8 Most Common Mistakes to Avoid When Building External Knowledge Base', 
		context: 'Building a knowledge base is not as easy as clicking couple of buttons and implementing it into your existing website. Actually, building a knowledge base is like building a completely new website, except it is integrated into your existing one. Look at it this way: It is a section of your website where your customers will be heading every time they need some information about your service or when they have an issue to be resolved. If you think that it is enough to set up your knowledge base software, list your categories/articles there and still expect your customers to use it, you are wrong! This is the part of your website which needs as much of optimization as any other. Actually, your customers will be using it as much as you put effort in it. In order to make your knowledge base a destination worthy of showing off to your customers and inviting them to search for the answers there, here‚Äôs the list of the most common mistakes to avoid when you are building your knowledge base.'
	},
	{ 
		title: 'Cheat Sheet: Cutting Down Customer Support Requests With Knowledge Base', 
		context: 'Hey, if you have plenty of customer support requests and you want to cut them down, no worries about that! You can always hide your contact us button and make your customers regret they ever tried to find it, right? Anyway, let‚Äôs see this: Did you hear about reactive and proactive customer service? The first one is all about answering the customer support requests and the second one (proactive) is all about reaching out first to your customers even before they ask anything. You might ask yourself why would anyone bother to reach out to their customers if they are not complaining? Well, there are plenty of reasons why you should (try to) do the proactive customer service. The main ‚Äúexcuse‚Äù for providing this kind of service is rooted in focusing on the customer experience as the main priority for your businesses. Simply put, proactive customer service will increase customer satisfaction and will make your customers less likely to churn from your company. More simply put, you will make more $$$ by doing this ¬Ø\_(„ÉÑ)_/¬Ø Let‚Äôs see some data: According to a study conducted by Harris Interactive/InContact, 87% consumers declared that they would be happy to be contacted proactively by businesses they consume. Nearly three-quarters (73%) of those who have had a pleasant surprise or positive experience with an incoming call from a business/service provider report they had a positive change in their perception of the organization calling them. 62% of those who have had a pleasant surprise or positive experience with an incoming call from a business/service provider have taken an action as a result of that positive experience. OK, what the proactive customer service has to do with cutting down support requests??? Here‚Äôs the explanation: Cutting down customer support requests actually shouldn‚Äôt be your final goal! Once you manage to reduce your customer support requests significantly, you want to use all of your available resources to start providing a great customer service and focus on your customer satisfaction. Simply put, with some tricks and tweaks, you can achieve none (or very few) of your customers contacts you. But, how strong is such bond and how likely your customers are going to churn? This has a lot to do with the ways you are actually going to cut down your customer support requests. Don‚Äôt forget, you can always hide that button!'
	},
	{ 
		title: '6 Simple Tricks to Make Your Knowledge Base Searchable', 
		context: 'Let‚Äôs start this with a question (which, be warned of that, is not the beginning of a very funny joke although it tends to be): What‚Äôs the difference between a plain FAQ page and a fancy knowledge base? A search bar? No! A working search bar!? YES! üôÇ Oh, it‚Äôs so easy to have a knowledge base! ‚Äì you might say. Just make your FAQ page searchable and VOILA! Yep, it‚Äôs that easy. But, is it? Well, if you pull out some tricks from your sleeve, it might be. First of all, let‚Äôs agree with this: We can‚Äôt allow ourselves to call something a knowledge base if it‚Äôs not searchable. So, for now, let‚Äôs call it a wannabe knowledge base. A wannabe knowledge base has everything same as a regular knowledge base: It has very informative and good written articles, it has categories, subcategories etc. but it is not searchable! In order to make your wannabe knowledge base searchable, the first thing you want to do is to have some search engine code under the hood. So, you need a knowledge base software. This can be done the harder and the easier way. The harder way: Go around and seek for an open source solution, install WordPress, install some plugins, try to make it searchable, use WordPress to publish your articles then use Google custom search plugins or code, hire a guy who knows to code and pay him to make the software, learn to code and do it yourself (the hardest way), and eventually you can come up with a solution which will work for you just well! The easier way: Go to Helpjuice.com, sign up for the demo, import your knowledge base articles, tell the support team how you would like to have the design customized and you are done with the software thing! DISCLAIMER: The rest of this article might be more appropriate for those who chose the easier way. Here‚Äôs why: Helpjuice is a knowledge base software which is optimized to make your knowledge base searchable. What works with Helpjuice might not work with your software solution (although SOME of the following tips might ‚Äì or should! ‚Äì be helpful, no matter what kind of software you use).'
	}
]

Article.create(articles)


